{
    "docs": [
        {
            "location": "/",
            "text": "\u041f\u0440\u0438\u0432\u0435\u0442",
            "title": "\u041f\u0440\u0438\u0432\u0435\u0442"
        },
        {
            "location": "/#_1",
            "text": "",
            "title": "\u041f\u0440\u0438\u0432\u0435\u0442"
        },
        {
            "location": "/arrays/coupon/",
            "text": "\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u0443\u043f\u043e\u043d\u043e\u0432\n\n\n>>> import random\n\n>>> n = 10**3\n\n>>> isCollected = [False for _ in range(n)]\n>>> collected = 0\n>>> count = 0\n\n>>> while collected < n:\n...     value = random.randrange(n)\n...     count += 1\n...     if not isCollected[value]:\n...         collected += 1\n...         isCollected[value] = True\n\n>>> print(count)",
            "title": "\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u0443\u043f\u043e\u043d\u043e\u0432"
        },
        {
            "location": "/arrays/coupon/#_1",
            "text": ">>> import random\n\n>>> n = 10**3\n\n>>> isCollected = [False for _ in range(n)]\n>>> collected = 0\n>>> count = 0\n\n>>> while collected < n:\n...     value = random.randrange(n)\n...     count += 1\n...     if not isCollected[value]:\n...         collected += 1\n...         isCollected[value] = True\n\n>>> print(count)",
            "title": "\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u0443\u043f\u043e\u043d\u043e\u0432"
        },
        {
            "location": "/arrays/matrix/",
            "text": "\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043c\u0430\u0442\u0440\u0438\u0446\u0430\u043c\u0438\n\n\n\u041c\u0430\u0442\u0440\u0438\u0447\u043d\u043e - \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435\n\n\n>>> A = [[2, 3],\n...      [1, 2]]\n>>> B = [1, 2]\n>>> S = [0 for _ in range(len(B))]\n>>> for i in range(len(A)):\n...     for j in range(len(B)):\n...         S[i] += A[i][j] * B[j]\n>>> S\n[8, 5]\n\n\n\n\u0412\u0435\u043a\u0442\u043e\u0440\u043d\u043e - \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u043e\u0435 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435\n\n\n>>> A = [1, 2]\n>>> B = [[2, 3],\n...      [1, 2]]\n>>> S = [0 for _ in range(len(A))]\n>>> for j in range(len(A)):\n...     for i in range(len(B)):\n...         S[j] += A[i] * B[i][j] \n>>> S\n[4, 7]\n\n\n\n\u041f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n\n\n>>> A = [[2, 4]]\n>>> B = [[.5],\n...      [.5]]\n\n>>> s = 0\n>>> for row in range(len(A)):\n...     for col in range(len(A[row])):\n...         s += A[row][col] * B[col][row]\n\n\n\n\u041f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u043c\u0430\u0442\u0440\u0438\u0446 n x n\n\n\n>>> A = [[2,  2], \n...      [4,  4],\n...      [6,  6]]\n>>> B = [[1,  1],\n...      [2,  2]]\n\n>>> C = []\n>>> for i in range(len(A)):\n...     c = [0 for j in range(len(B))]\n...     C.append(c)\n\n>>> for i in range(len(A)):\n...     for j in range(len(B)):\n...         for k in range(len(B)):\n...             C[i][j] += A[i][k] * B[k][j]\n\n>>> C\n[[6, 6], [12, 12], [18, 18]]",
            "title": "\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043c\u0430\u0442\u0440\u0438\u0446\u0430\u043c\u0438"
        },
        {
            "location": "/arrays/matrix/#_1",
            "text": "\u041c\u0430\u0442\u0440\u0438\u0447\u043d\u043e - \u0432\u0435\u043a\u0442\u043e\u0440\u043d\u043e\u0435 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435  >>> A = [[2, 3],\n...      [1, 2]]\n>>> B = [1, 2]\n>>> S = [0 for _ in range(len(B))]\n>>> for i in range(len(A)):\n...     for j in range(len(B)):\n...         S[i] += A[i][j] * B[j]\n>>> S\n[8, 5]  \u0412\u0435\u043a\u0442\u043e\u0440\u043d\u043e - \u043c\u0430\u0442\u0440\u0438\u0447\u043d\u043e\u0435 \u0443\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435  >>> A = [1, 2]\n>>> B = [[2, 3],\n...      [1, 2]]\n>>> S = [0 for _ in range(len(A))]\n>>> for j in range(len(A)):\n...     for i in range(len(B)):\n...         S[j] += A[i] * B[i][j] \n>>> S\n[4, 7]  \u041f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0430 \u0441\u0442\u043e\u043b\u0431\u0435\u0446  >>> A = [[2, 4]]\n>>> B = [[.5],\n...      [.5]]\n\n>>> s = 0\n>>> for row in range(len(A)):\n...     for col in range(len(A[row])):\n...         s += A[row][col] * B[col][row]  \u041f\u0435\u0440\u0435\u043c\u043d\u043e\u0436\u0435\u043d\u0438\u0435 \u0434\u0432\u0443\u0445 \u043c\u0430\u0442\u0440\u0438\u0446 n x n  >>> A = [[2,  2], \n...      [4,  4],\n...      [6,  6]]\n>>> B = [[1,  1],\n...      [2,  2]]\n\n>>> C = []\n>>> for i in range(len(A)):\n...     c = [0 for j in range(len(B))]\n...     C.append(c)\n\n>>> for i in range(len(A)):\n...     for j in range(len(B)):\n...         for k in range(len(B)):\n...             C[i][j] += A[i][k] * B[k][j]\n\n>>> C\n[[6, 6], [12, 12], [18, 18]]",
            "title": "\u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u043c\u0430\u0442\u0440\u0438\u0446\u0430\u043c\u0438"
        },
        {
            "location": "/arrays/coupon_set/",
            "text": "\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u0443\u043f\u043e\u043d\u043e\u0432. \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e\n\n\n>>> import random\n\n>>> n = 10**3\n\n>>> isCollected = set()\n>>> collected = 0\n>>> count = 0\n\n>>> while collected < n:\n...     value = random.randrange(n)\n...     count += 1\n...     if value in isCollected:\n...         continue\n...     collected += 1\n...     isCollected.add(value)\n\n>>> print(count)",
            "title": "\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u0443\u043f\u043e\u043d\u043e\u0432. \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e"
        },
        {
            "location": "/arrays/coupon_set/#_1",
            "text": ">>> import random\n\n>>> n = 10**3\n\n>>> isCollected = set()\n>>> collected = 0\n>>> count = 0\n\n>>> while collected < n:\n...     value = random.randrange(n)\n...     count += 1\n...     if value in isCollected:\n...         continue\n...     collected += 1\n...     isCollected.add(value)\n\n>>> print(count)",
            "title": "\u041a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044f \u043a\u0443\u043f\u043e\u043d\u043e\u0432. \u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e"
        },
        {
            "location": "/arrays/primesieve/",
            "text": "\u0420\u0435\u0448\u0435\u0442\u043e \u042d\u0440\u0430\u0442\u043e\u0441\u0444\u0435\u043d\u0430\n\n\n>>> def sieve(n):\n...     is_prime = [True for _ in range(n + 1)]\n... \n...     for i in range(2, n):\n...         if is_prime[i]:\n...             for j in range(2, n//i + 1):\n...                 is_prime[i*j] = False\n... \n...     return sum(is_prime[i] for i in range(2, n))\n\n\n\n\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0435\u0439 <= n\n\n\n>>> sieve(25)\n9\n\n>>> sieve(100)\n25\n\n>>> sieve(10000)\n1229",
            "title": "\u0420\u0435\u0448\u0435\u0442\u043e \u042d\u0440\u0430\u0442\u043e\u0441\u0444\u0435\u043d\u0430"
        },
        {
            "location": "/arrays/primesieve/#_1",
            "text": ">>> def sieve(n):\n...     is_prime = [True for _ in range(n + 1)]\n... \n...     for i in range(2, n):\n...         if is_prime[i]:\n...             for j in range(2, n//i + 1):\n...                 is_prime[i*j] = False\n... \n...     return sum(is_prime[i] for i in range(2, n))  \u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0435\u0439 <= n  >>> sieve(25)\n9\n\n>>> sieve(100)\n25\n\n>>> sieve(10000)\n1229",
            "title": "\u0420\u0435\u0448\u0435\u0442\u043e \u042d\u0440\u0430\u0442\u043e\u0441\u0444\u0435\u043d\u0430"
        },
        {
            "location": "/arrays/precalc/",
            "text": "\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0440\u0430\u043d\u0435\u0435\n\n\n\u041e\u0431\u043c\u0435\u043d \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u043d\u0430 \u0432\u0440\u0435\u043c\u044f.\n\u0414\u043b\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f.\n\n\n>>> n = 5\n>>> a = [0 for x in range(n + 1)]\n>>> for i in range(1, n + 1):\n...     a[i] = a[i-1] + 1.0 / i\n>>> a\n[0, 1.0, 1.5, 1.8333333333333333, 2.083333333333333, 2.283333333333333]",
            "title": "\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0440\u0430\u043d\u0435\u0435"
        },
        {
            "location": "/arrays/precalc/#_1",
            "text": "\u041e\u0431\u043c\u0435\u043d \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u0430 \u043d\u0430 \u0432\u0440\u0435\u043c\u044f.\n\u0414\u043b\u044f \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f.  >>> n = 5\n>>> a = [0 for x in range(n + 1)]\n>>> for i in range(1, n + 1):\n...     a[i] = a[i-1] + 1.0 / i\n>>> a\n[0, 1.0, 1.5, 1.8333333333333333, 2.083333333333333, 2.283333333333333]",
            "title": "\u0412\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0440\u0430\u043d\u0435\u0435"
        },
        {
            "location": "/arrays/sample/",
            "text": "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n\n\n\u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435\u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n\n\n>>> import random\n\n>>> def sample(a, n):\n...     res = []\n...     s = a\n...     for i in range(n):\n...         r = random.randrange(i, n)\n...         res.append(s[r])\n...         s[r], s[i] = s[i], s[r]\n...     return res\n\n>>> random.seed(5)\n>>> a = [3, 4, 1, 2, 5]\n>>> sample(a, 5)\n[5, 2, 3, 1, 4]\n\n>>> sample(a, 2)\n[2, 5]\n\n\n\n\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f sample\n\n\n>>> random.seed(5)\n>>> a = [3, 4, 1, 2, 5]\n>>> random.sample(a, 5)\n[5, 1, 2, 4, 3]",
            "title": "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438"
        },
        {
            "location": "/arrays/sample/#_1",
            "text": "\u0412\u044b\u0431\u043e\u0440\u043a\u0430 \u043d\u0435\u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.  >>> import random\n\n>>> def sample(a, n):\n...     res = []\n...     s = a\n...     for i in range(n):\n...         r = random.randrange(i, n)\n...         res.append(s[r])\n...         s[r], s[i] = s[i], s[r]\n...     return res\n\n>>> random.seed(5)\n>>> a = [3, 4, 1, 2, 5]\n>>> sample(a, 5)\n[5, 2, 3, 1, 4]\n\n>>> sample(a, 2)\n[2, 5]  \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f sample  >>> random.seed(5)\n>>> a = [3, 4, 1, 2, 5]\n>>> random.sample(a, 5)\n[5, 1, 2, 4, 3]",
            "title": "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438"
        },
        {
            "location": "/flow/euclid_distance/",
            "text": "\u0415\u0432\u043a\u043b\u0438\u0434\u043e\u0432\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0442\u043e\u0447\u043a\u0430\u043c\u0438\n\n\n>>> import math\n>>> z = math.sqrt(2)\n>>> z  # doctest: +ELLIPSIS\n1.41...\n\n>>> def euclid_distance(p1, p2):\n...     return math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2)\n\n>>> from collections import namedtuple\n>>> Point = namedtuple('Point', 'x y')\n\n>>> p1 = Point(1, 1)\n>>> p2 = Point(2, 2)\n>>> d = euclid_distance(p1, p2)\n>>> d  # doctest: +ELLIPSIS\n1.41...",
            "title": "\u0415\u0432\u043a\u043b\u0438\u0434\u043e\u0432\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435"
        },
        {
            "location": "/flow/euclid_distance/#_1",
            "text": ">>> import math\n>>> z = math.sqrt(2)\n>>> z  # doctest: +ELLIPSIS\n1.41...\n\n>>> def euclid_distance(p1, p2):\n...     return math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2)\n\n>>> from collections import namedtuple\n>>> Point = namedtuple('Point', 'x y')\n\n>>> p1 = Point(1, 1)\n>>> p2 = Point(2, 2)\n>>> d = euclid_distance(p1, p2)\n>>> d  # doctest: +ELLIPSIS\n1.41...",
            "title": "\u0415\u0432\u043a\u043b\u0438\u0434\u043e\u0432\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0442\u043e\u0447\u043a\u0430\u043c\u0438"
        },
        {
            "location": "/flow/rnd/",
            "text": "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n\n\n>>> import random\n>>> import reprlib\n>>> from collections import namedtuple\n\n\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0434\u0438\u043d \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0431\u0440\u043e\u0441\u043e\u043a \u043c\u043e\u043d\u0435\u0442\u043a\u0438\n>>> def flip():\n...     return '\u041e\u0440\u0435\u043b' if random.randrange(0, 2) == 0 else '\u0420\u0435\u0448\u043a\u0430'\n\n\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0431\u0440\u043e\u0441\u043e\u043a \u0438\u0433\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u0441\u0442\u0438\n>>> def roll():\n...     return random.randrange(1, 7)\n\n>>> RndResults = namedtuple('RndResults', 'list max min mid')\n\n>>> def rng(n):\n...     rs = list(random.random() for _ in range(n))\n...     mn = min(rs)\n...     mx = max(rs)\n...     md = sum(rs) / len(rs)\n...     return RndResults(rs, mn, mx, md)\n\n>>> random.seed(10)\n\n\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0431\u0440\u043e\u0441\u043a\u0438 \u043c\u043e\u043d\u0435\u0442\u043a\u0438\n>>> list(flip() for _ in range(3))\n['\u041e\u0440\u0435\u043b', '\u0420\u0435\u0448\u043a\u0430', '\u0420\u0435\u0448\u043a\u0430']\n\n\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0431\u0440\u043e\u0441\u043a\u0438 \u043a\u0443\u0431\u0438\u043a\u0430\n>>> list(roll() for _ in range(3))\n[5, 1, 2]\n\n\u0420\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n>>> r = rng(10)\n>>> reprlib.repr(r.list)  # doctest: +ELLIPSIS\n'[0.462..., 0.491..., 0.277..., 0.810..., 0.0344..., 0.490..., ...]'\n>>> '\u041c\u0438\u043d\u0438\u043c\u0443\u043c: {:.2f}, \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c: {:.2f}, \u0421\u0440\u0435\u0434\u043d\u0435\u0435: {:.2f}'.format(*r[1:])\n'\u041c\u0438\u043d\u0438\u043c\u0443\u043c: 0.03, \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c: 0.95, \u0421\u0440\u0435\u0434\u043d\u0435\u0435: 0.47'",
            "title": "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430"
        },
        {
            "location": "/flow/rnd/#_1",
            "text": ">>> import random\n>>> import reprlib\n>>> from collections import namedtuple\n\n\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u043e\u0434\u0438\u043d \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0431\u0440\u043e\u0441\u043e\u043a \u043c\u043e\u043d\u0435\u0442\u043a\u0438\n>>> def flip():\n...     return '\u041e\u0440\u0435\u043b' if random.randrange(0, 2) == 0 else '\u0420\u0435\u0448\u043a\u0430'\n\n\u0413\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0431\u0440\u043e\u0441\u043e\u043a \u0438\u0433\u0440\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u0441\u0442\u0438\n>>> def roll():\n...     return random.randrange(1, 7)\n\n>>> RndResults = namedtuple('RndResults', 'list max min mid')\n\n>>> def rng(n):\n...     rs = list(random.random() for _ in range(n))\n...     mn = min(rs)\n...     mx = max(rs)\n...     md = sum(rs) / len(rs)\n...     return RndResults(rs, mn, mx, md)\n\n>>> random.seed(10)\n\n\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0431\u0440\u043e\u0441\u043a\u0438 \u043c\u043e\u043d\u0435\u0442\u043a\u0438\n>>> list(flip() for _ in range(3))\n['\u041e\u0440\u0435\u043b', '\u0420\u0435\u0448\u043a\u0430', '\u0420\u0435\u0448\u043a\u0430']\n\n\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0431\u0440\u043e\u0441\u043a\u0438 \u043a\u0443\u0431\u0438\u043a\u0430\n>>> list(roll() for _ in range(3))\n[5, 1, 2]\n\n\u0420\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n>>> r = rng(10)\n>>> reprlib.repr(r.list)  # doctest: +ELLIPSIS\n'[0.462..., 0.491..., 0.277..., 0.810..., 0.0344..., 0.490..., ...]'\n>>> '\u041c\u0438\u043d\u0438\u043c\u0443\u043c: {:.2f}, \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c: {:.2f}, \u0421\u0440\u0435\u0434\u043d\u0435\u0435: {:.2f}'.format(*r[1:])\n'\u041c\u0438\u043d\u0438\u043c\u0443\u043c: 0.03, \u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c: 0.95, \u0421\u0440\u0435\u0434\u043d\u0435\u0435: 0.47'",
            "title": "\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430"
        },
        {
            "location": "/flow/newton/",
            "text": "\u041c\u0435\u0442\u043e\u0434 \u041d\u044c\u044e\u0442\u043e\u043d\u0430\n\n\nx = sqrt(y)\ny = x^2\nf(x) = x^2 - y\n\n\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u0440\u0435\u043d\u044c \u0446\u0435\u043b\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\ny - \u0447\u0438\u0441\u043b\u043e\nx - \u043e\u0446\u0435\u043d\u043a\u0430\n\n>>> y = 2.0\n>>> x = y\n>>> eps = 1e-5 * x\n>>> while (x - y / x) > eps:\n...     x = (x + y / x) / 2.0\n>>> x\n1.4142156862745097",
            "title": "\u041c\u0435\u0442\u043e\u0434 \u041d\u044c\u044e\u0442\u043e\u043d\u0430"
        },
        {
            "location": "/flow/newton/#_1",
            "text": "x = sqrt(y)\ny = x^2\nf(x) = x^2 - y\n\n\u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u0440\u0435\u043d\u044c \u0446\u0435\u043b\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430\ny - \u0447\u0438\u0441\u043b\u043e\nx - \u043e\u0446\u0435\u043d\u043a\u0430\n\n>>> y = 2.0\n>>> x = y\n>>> eps = 1e-5 * x\n>>> while (x - y / x) > eps:\n...     x = (x + y / x) / 2.0\n>>> x\n1.4142156862745097",
            "title": "\u041c\u0435\u0442\u043e\u0434 \u041d\u044c\u044e\u0442\u043e\u043d\u0430"
        },
        {
            "location": "/flow/leap_year/",
            "text": "\u0412\u0438\u0441\u043e\u043a\u043e\u0441\u043d\u044b\u0439 \u0433\u043e\u0434\n\n\n>>> def leapyear(y):\n...     return all([\n...         y % 4 == 0,\n...         y % 100 != 0,\n...         y % 400 != 0\n...     ])\n\n\n>>> leapyear(2016)\nTrue\n\n>>> leapyear(2017)\nFalse",
            "title": "\u0412\u0438\u0441\u043e\u043a\u043e\u0441\u043d\u044b\u0439 \u0433\u043e\u0434"
        },
        {
            "location": "/flow/leap_year/#_1",
            "text": ">>> def leapyear(y):\n...     return all([\n...         y % 4 == 0,\n...         y % 100 != 0,\n...         y % 400 != 0\n...     ])\n\n\n>>> leapyear(2016)\nTrue\n\n>>> leapyear(2017)\nFalse",
            "title": "\u0412\u0438\u0441\u043e\u043a\u043e\u0441\u043d\u044b\u0439 \u0433\u043e\u0434"
        },
        {
            "location": "/flow/income_rate/",
            "text": ">>> import math\n\n\n>>> def get_rate(income):\n...     if income < 100: return 0.01\n...     elif income < 1000: return 0.034\n...     elif income < 5000: return 0.05\n...     else: return 0.067\n\n\n>>> def percent(p, r, t):\n...     result = p * math.exp(r * t)\n...     return result\n\n\n\n\u041f\u043e\u0434\u043e\u0445\u043e\u0434\u043d\u044b\u0439 \u043d\u0430\u043b\u043e\u0433\n\n\n>>> get_rate(99)\n0.01\n>>> get_rate(999)\n0.034\n>>> get_rate(4999)\n0.05\n>>> get_rate(5001)\n0.067\n\n\n\n\u041d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430\n\n\n>>> percent(p=100, r=0.1, t=10)\n271.8281828459045",
            "title": "\u041d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442"
        },
        {
            "location": "/flow/income_rate/#_1",
            "text": ">>> get_rate(99)\n0.01\n>>> get_rate(999)\n0.034\n>>> get_rate(4999)\n0.05\n>>> get_rate(5001)\n0.067  \u041d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u0430  >>> percent(p=100, r=0.1, t=10)\n271.8281828459045",
            "title": "\u041f\u043e\u0434\u043e\u0445\u043e\u0434\u043d\u044b\u0439 \u043d\u0430\u043b\u043e\u0433"
        },
        {
            "location": "/flow/permutations/",
            "text": "\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n\n\n>>> import random\n>>> from itertools import product, permutations\n\n>>> random.seed(2)\n\n>>> x = [0, 1]\n\nProduct:\n>>> for p in product(x, repeat=2):\n...     print(p)\n(0, 0)\n(0, 1)\n(1, 0)\n(1, 1)\n\n\nShuffle:\n>>> for _ in range(2):\n...     random.shuffle(x)\n...     print(x)\n[1, 0]\n[0, 1]\n\nPermutations:\n>>> for p in permutations(x):\n...     print(p)\n(0, 1)\n(1, 0)\n\nManual:\n>>> z = [0, 1]\n>>> n = 2\n>>> for i in range(n):\n...     r = random.randrange(i, n)\n...     z[r], z[i] = z[i], z[r]\n>>> print(z)\n[0, 1]",
            "title": "\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438"
        },
        {
            "location": "/flow/permutations/#_1",
            "text": ">>> import random\n>>> from itertools import product, permutations\n\n>>> random.seed(2)\n\n>>> x = [0, 1]\n\nProduct:\n>>> for p in product(x, repeat=2):\n...     print(p)\n(0, 0)\n(0, 1)\n(1, 0)\n(1, 1)\n\n\nShuffle:\n>>> for _ in range(2):\n...     random.shuffle(x)\n...     print(x)\n[1, 0]\n[0, 1]\n\nPermutations:\n>>> for p in permutations(x):\n...     print(p)\n(0, 1)\n(1, 0)\n\nManual:\n>>> z = [0, 1]\n>>> n = 2\n>>> for i in range(n):\n...     r = random.randrange(i, n)\n...     z[r], z[i] = z[i], z[r]\n>>> print(z)\n[0, 1]",
            "title": "\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438"
        },
        {
            "location": "/flow/rgb/",
            "text": "RGB \u0438 CMYK\n\n\n\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u0430 \u043a \u043f\u0435\u0447\u0430\u0442\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443\n\n\n>>> from collections import namedtuple\n\n\n>>> RGB = namedtuple('RGB', 'r g b')\n>>> CMYK = namedtuple('CMYK', 'c m y k')\n\n\n>>> def get_cmyk(rgb: RGB):\n...     if not all(rgb):\n...         return CMYK(0, 0, 0, k=1)\n...     r, g, b = rgb\n...     w = max(r / 255, g / 255, b / 255)\n...     c = (w - r / 255) / w\n...     m = (w - g / 255) / w\n...     y = (w - b / 255) / w\n...     k = 1 - w\n...     return CMYK(c, m, y, k)\n\n\n>>> color = RGB(0, 0, 0)\n>>> get_cmyk(color)\nCMYK(c=0, m=0, y=0, k=1)\n\n>>> color = RGB(120, 60, 100)\n>>> get_cmyk(color)\nCMYK(c=0.0, m=0.5, y=0.16666666666666666, k=0.5294117647058824)",
            "title": "RGB \u0438 CMYK"
        },
        {
            "location": "/flow/rgb/#rgb-cmyk",
            "text": "",
            "title": "RGB \u0438 CMYK"
        },
        {
            "location": "/flow/rgb/#_1",
            "text": ">>> from collections import namedtuple\n\n\n>>> RGB = namedtuple('RGB', 'r g b')\n>>> CMYK = namedtuple('CMYK', 'c m y k')\n\n\n>>> def get_cmyk(rgb: RGB):\n...     if not all(rgb):\n...         return CMYK(0, 0, 0, k=1)\n...     r, g, b = rgb\n...     w = max(r / 255, g / 255, b / 255)\n...     c = (w - r / 255) / w\n...     m = (w - g / 255) / w\n...     y = (w - b / 255) / w\n...     k = 1 - w\n...     return CMYK(c, m, y, k)\n\n\n>>> color = RGB(0, 0, 0)\n>>> get_cmyk(color)\nCMYK(c=0, m=0, y=0, k=1)\n\n>>> color = RGB(120, 60, 100)\n>>> get_cmyk(color)\nCMYK(c=0.0, m=0.5, y=0.16666666666666666, k=0.5294117647058824)",
            "title": "\u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0446\u0432\u0435\u0442\u0430 \u043a \u043f\u0435\u0447\u0430\u0442\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443"
        },
        {
            "location": "/flow/mid_five/",
            "text": "\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0438\u0437 5\n\n\n\u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u0438\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 5\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n\n\n# [1, 2, 3, 4, 6]\n>>> a = [2, 4, 6, 1, 3]\n>>> sorted(a)[len(a) // 2]\n3",
            "title": "\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0438\u0437 5"
        },
        {
            "location": "/flow/mid_five/#5",
            "text": "\u041d\u0430\u0439\u0442\u0438 \u0441\u0440\u0435\u0434\u0438\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 5\u0442\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.  # [1, 2, 3, 4, 6]\n>>> a = [2, 4, 6, 1, 3]\n>>> sorted(a)[len(a) // 2]\n3",
            "title": "\u0421\u0440\u0435\u0434\u043d\u0435\u0435 \u0438\u0437 5"
        },
        {
            "location": "/flow/monte_carlo/",
            "text": "\u041c\u0435\u0442\u043e\u0434 \u041c\u043e\u043d\u0442\u0435-\u041a\u0430\u0440\u043b\u043e\n\n\n>>> import random\n>>> random.seed(2)\n\n>>> bets = 0\n>>> wins = 0\n>>> trials = 1000\n>>> stake = 10\n>>> goal = 20\n\n>>> for t in range(trials):\n...     cash = stake\n...     while 0 < cash < goal:\n...         bets += 1\n...         if random.randrange(0, 2) == 0:\n...             cash += 1\n...         else:\n...             cash -= 1\n...     if cash == goal:\n...         wins += 1\n\n>>> print('p = ' + str(100 * wins // trials) + '% wins')\np = 46% wins\n>>> print('\u0421\u0440. \u043a-\u0432\u043e \u0441\u0442\u0430\u0432\u043e\u043a \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435: ' + str(bets // trials))\n\u0421\u0440. \u043a-\u0432\u043e \u0441\u0442\u0430\u0432\u043e\u043a \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435: 101",
            "title": "\u041c\u0435\u0442\u043e\u0434 \u041c\u043e\u043d\u0442\u0435-\u041a\u0430\u0440\u043b\u043e"
        },
        {
            "location": "/flow/monte_carlo/#-",
            "text": ">>> import random\n>>> random.seed(2)\n\n>>> bets = 0\n>>> wins = 0\n>>> trials = 1000\n>>> stake = 10\n>>> goal = 20\n\n>>> for t in range(trials):\n...     cash = stake\n...     while 0 < cash < goal:\n...         bets += 1\n...         if random.randrange(0, 2) == 0:\n...             cash += 1\n...         else:\n...             cash -= 1\n...     if cash == goal:\n...         wins += 1\n\n>>> print('p = ' + str(100 * wins // trials) + '% wins')\np = 46% wins\n>>> print('\u0421\u0440. \u043a-\u0432\u043e \u0441\u0442\u0430\u0432\u043e\u043a \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435: ' + str(bets // trials))\n\u0421\u0440. \u043a-\u0432\u043e \u0441\u0442\u0430\u0432\u043e\u043a \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435: 101",
            "title": "\u041c\u0435\u0442\u043e\u0434 \u041c\u043e\u043d\u0442\u0435-\u041a\u0430\u0440\u043b\u043e"
        },
        {
            "location": "/flow/prime/",
            "text": "\u041c\u043d\u043e\u0436\u0438\u0442\u0435\u0438 \u0438 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438\n\n\n\u041f\u043e\u0438\u0441\u043a \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439\n\n\n>>> def find_primes(n):\n...     rows = []\n...     for i in range(1, n + 1):\n...         row = []\n...         for j in range(1, n + 1):\n...             if (i % j) == 0 or (j % i) == 0:\n...                 row.append(' * ')\n...             else:\n...                 row.append('   ')\n...         rows.append(row)\n...     return rows\n\n\n\u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e i \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 j \u0438\u043b\u0438 j \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 i\n\n>>> for row in find_primes(16):\n...     print(''.join(row))\n *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * \n *  *     *     *     *     *     *     *     * \n *     *        *        *        *        *    \n *  *     *           *           *           * \n *           *              *              *    \n *  *  *        *                 *             \n *                 *                    *       \n *  *     *           *                       * \n *     *                 *                      \n *  *        *              *                   \n *                             *                \n *  *  *  *     *                 *             \n *                                   *          \n *  *              *                    *       \n *     *     *                             *    \n *  *     *           *                       *\n\n\n\n\u0420\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438\n\n\n>>> def prime_factors(n):\n...     factor = 2\n...     while factor * factor <= n:\n...         while n % factor == 0:\n...             n //= factor\n...             yield factor\n...         factor += 1\n...     if n > 1:\n...         yield n\n\n>>> list(prime_factors(n=10))\n[2, 5]\n\n>>> list(prime_factors(n=1233))\n[3, 3, 137]",
            "title": "\u041c\u043d\u043e\u0436\u0438\u0442\u0435\u0438 \u0438 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438"
        },
        {
            "location": "/flow/prime/#_1",
            "text": "",
            "title": "\u041c\u043d\u043e\u0436\u0438\u0442\u0435\u0438 \u0438 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438"
        },
        {
            "location": "/flow/prime/#_2",
            "text": ">>> def find_primes(n):\n...     rows = []\n...     for i in range(1, n + 1):\n...         row = []\n...         for j in range(1, n + 1):\n...             if (i % j) == 0 or (j % i) == 0:\n...                 row.append(' * ')\n...             else:\n...                 row.append('   ')\n...         rows.append(row)\n...     return rows\n\n\n\u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e i \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 j \u0438\u043b\u0438 j \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 i\n\n>>> for row in find_primes(16):\n...     print(''.join(row))\n *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * \n *  *     *     *     *     *     *     *     * \n *     *        *        *        *        *    \n *  *     *           *           *           * \n *           *              *              *    \n *  *  *        *                 *             \n *                 *                    *       \n *  *     *           *                       * \n *     *                 *                      \n *  *        *              *                   \n *                             *                \n *  *  *  *     *                 *             \n *                                   *          \n *  *              *                    *       \n *     *     *                             *    \n *  *     *           *                       *",
            "title": "\u041f\u043e\u0438\u0441\u043a \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439"
        },
        {
            "location": "/flow/prime/#_3",
            "text": ">>> def prime_factors(n):\n...     factor = 2\n...     while factor * factor <= n:\n...         while n % factor == 0:\n...             n //= factor\n...             yield factor\n...         factor += 1\n...     if n > 1:\n...         yield n\n\n>>> list(prime_factors(n=10))\n[2, 5]\n\n>>> list(prime_factors(n=1233))\n[3, 3, 137]",
            "title": "\u0420\u0430\u0437\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438"
        },
        {
            "location": "/flow/harmonic/",
            "text": "\u0413\u0430\u0440\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430\n\n\n\\sum_{i=1}^{n}\\frac{1}{i}\n\n>>> 1/1 + 1/2 + 1/3 + 1/4 + 1/5\n2.283333333333333\n\n\n>>> n = 5\n>>> total = 0.0\n>>> for i in range(1, n + 1):\n...     total += 1.0 / i\n>>> total\n2.283333333333333",
            "title": "\u0413\u0430\u0440\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430"
        },
        {
            "location": "/flow/harmonic/#_1",
            "text": "\\sum_{i=1}^{n}\\frac{1}{i}\n\n>>> 1/1 + 1/2 + 1/3 + 1/4 + 1/5\n2.283333333333333\n\n\n>>> n = 5\n>>> total = 0.0\n>>> for i in range(1, n + 1):\n...     total += 1.0 / i\n>>> total\n2.283333333333333",
            "title": "\u0413\u0430\u0440\u043c\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0447\u0438\u0441\u043b\u0430"
        },
        {
            "location": "/flow/gauss/",
            "text": "\u0413\u0430\u0443\u0441\u0441\u043e\u0432\u044b \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n\n\n>>> import math\n>>> import random\n\n\n>>> def gauss(count: int):\n...     for _ in range(count):\n...         v = random.random()\n...         u = random.random()\n...         z = math.sin(2 * math.pi * v) * (-2 * math.log(u)) ** (1 / 2)\n...         yield z\n\n>>> random.seed(2)\n>>> count = 9\n>>> for x in gauss(count):\n...    print(round(x, 2))\n-0.09\n0.77\n-0.67\n-1.34\n-0.62\n-0.94\n0.58\n-0.1\n-0.34",
            "title": "\u0413\u0430\u0443\u0441\u0441\u043e\u0432\u044b \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430"
        },
        {
            "location": "/flow/gauss/#_1",
            "text": ">>> import math\n>>> import random\n\n\n>>> def gauss(count: int):\n...     for _ in range(count):\n...         v = random.random()\n...         u = random.random()\n...         z = math.sin(2 * math.pi * v) * (-2 * math.log(u)) ** (1 / 2)\n...         yield z\n\n>>> random.seed(2)\n>>> count = 9\n>>> for x in gauss(count):\n...    print(round(x, 2))\n-0.09\n0.77\n-0.67\n-1.34\n-0.62\n-0.94\n0.58\n-0.1\n-0.34",
            "title": "\u0413\u0430\u0443\u0441\u0441\u043e\u0432\u044b \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430"
        },
        {
            "location": "/flow/polar/",
            "text": "\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 \u043f\u043e\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b\n\n\n>>> import math\n\n\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0443\u0433\u043b\u043e\u0432 \u0430\u0440\u043a\u0442\u0430\u043d\u0433\u0435\u043d\u0441\u0430\n\n\n>>> def to_polar(x, y):\n...     if x == 0 and y == 0:\n...         return 0.0, 0.0\n...     r = math.sqrt(x ** 2 + y ** 2)\n...     phi = 0\n...     if x > 0:\n...         if y >= 0:\n...             phi = math.atan(y / x)\n...         else:\n...             phi = math.atan(y / x) + (2 * math.pi)\n...     elif x < 0:\n...         phi = math.atan(y / x) + math.pi\n...     elif x == 0:\n...         if y > 0:\n...             phi = math.pi / 2\n...         elif y < 0:\n...             phi = 3 * math.pi / 2\n...     return r, math.degrees(phi)\n\n# x > 0, y >= 0\n>>> to_polar(x=1, y=0)\n(1.0, 0.0)\n\n>>> to_polar(x=1, y=1)  # doctest: +ELLIPSIS\n(1.414..., 45.0)\n\n# x > 0, y < 0\n>>> to_polar(x=1, y=-1)  # doctest: +ELLIPSIS\n(1.414..., 315.0)\n\n# x < 0\n>>> to_polar(x=-1, y=1)  # doctest: +ELLIPSIS\n(1.414..., 135.0)\n\n# x = 0, y < 0\n>>> to_polar(x=0, y=-1)  # doctest: +ELLIPSIS\n(1.0, 270.0)\n\n# x = 0, y = 0\n>>> to_polar(x=0, y=0)  # doctest: +ELLIPSIS\n(0.0, 0.0)\n\n\n\nAtan2\n\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e atan2 \u0438\u0437 \u043f\u0430\u043a\u0435\u0442\u0430 math\n\n\n>>> def to_polar2(x, y):\n...     r = (x ** 2 + y ** 2) ** (1 / 2)\n...     phi = math.degrees(math.atan2(y, x))\n...     return r, phi\n\n# x > 0, y >= 0\n>>> to_polar2(x=1, y=0)\n(1.0, 0.0)\n\n>>> to_polar2(x=1, y=1)  # doctest: +ELLIPSIS\n(1.414..., 45.0)\n\n# x > 0, y < 0\n>>> to_polar2(x=1, y=-1)   # doctest: +ELLIPSIS\n(1.414..., -45.0)\n\n# x < 0\n>>> to_polar2(x=-1, y=1)   # doctest: +ELLIPSIS\n(1.414..., 135.0)\n\n# x = 0, y < 0\n>>> to_polar2(x=0, y=-1)\n(1.0, -90.0)\n\n# x = 0, y = 0\n>>> to_polar2(x=0, y=0)\n(0.0, 0.0)\n\n\n\nPolar\n\n\n\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e polar \u0438\u0437 \u043f\u0430\u043a\u0435\u0442\u0430 math \n\n\n>>> from cmath import polar\n\n# x > 0, y >= 0\n>>> polar(complex(1, 0))\n(1.0, 0.0)\n\n>>> r, phi = polar(complex(1, 1))\n>>> r  # doctest: +ELLIPSIS\n1.414...\n>>> math.radians(45.0)  # doctest: +ELLIPSIS\n0.785...\n>>> phi  # doctest: +ELLIPSIS\n0.785...\n\n# x > 0, y < 0\n>>> polar(complex(1, -1))  # doctest: +ELLIPSIS\n(1.414..., -0.785...)\n\n# x < 0\n>>> polar(complex(-1, 1))  # doctest: +ELLIPSIS\n(1.414..., 2.356...)\n\n# x = 0, y < 0\n>>> polar(complex(0, -1))  # doctest: +ELLIPSIS\n(1.0, -1.570...)\n\n# x = 0, y = 0\n>>> polar(complex(0, 0))\n(0.0, 0.0)",
            "title": "\u041f\u043e\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b"
        },
        {
            "location": "/flow/polar/#_1",
            "text": ">>> import math  \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u043e \u0443\u0433\u043b\u043e\u0432 \u0430\u0440\u043a\u0442\u0430\u043d\u0433\u0435\u043d\u0441\u0430  >>> def to_polar(x, y):\n...     if x == 0 and y == 0:\n...         return 0.0, 0.0\n...     r = math.sqrt(x ** 2 + y ** 2)\n...     phi = 0\n...     if x > 0:\n...         if y >= 0:\n...             phi = math.atan(y / x)\n...         else:\n...             phi = math.atan(y / x) + (2 * math.pi)\n...     elif x < 0:\n...         phi = math.atan(y / x) + math.pi\n...     elif x == 0:\n...         if y > 0:\n...             phi = math.pi / 2\n...         elif y < 0:\n...             phi = 3 * math.pi / 2\n...     return r, math.degrees(phi)\n\n# x > 0, y >= 0\n>>> to_polar(x=1, y=0)\n(1.0, 0.0)\n\n>>> to_polar(x=1, y=1)  # doctest: +ELLIPSIS\n(1.414..., 45.0)\n\n# x > 0, y < 0\n>>> to_polar(x=1, y=-1)  # doctest: +ELLIPSIS\n(1.414..., 315.0)\n\n# x < 0\n>>> to_polar(x=-1, y=1)  # doctest: +ELLIPSIS\n(1.414..., 135.0)\n\n# x = 0, y < 0\n>>> to_polar(x=0, y=-1)  # doctest: +ELLIPSIS\n(1.0, 270.0)\n\n# x = 0, y = 0\n>>> to_polar(x=0, y=0)  # doctest: +ELLIPSIS\n(0.0, 0.0)",
            "title": "\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0432 \u043f\u043e\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b"
        },
        {
            "location": "/flow/polar/#atan2",
            "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e atan2 \u0438\u0437 \u043f\u0430\u043a\u0435\u0442\u0430 math  >>> def to_polar2(x, y):\n...     r = (x ** 2 + y ** 2) ** (1 / 2)\n...     phi = math.degrees(math.atan2(y, x))\n...     return r, phi\n\n# x > 0, y >= 0\n>>> to_polar2(x=1, y=0)\n(1.0, 0.0)\n\n>>> to_polar2(x=1, y=1)  # doctest: +ELLIPSIS\n(1.414..., 45.0)\n\n# x > 0, y < 0\n>>> to_polar2(x=1, y=-1)   # doctest: +ELLIPSIS\n(1.414..., -45.0)\n\n# x < 0\n>>> to_polar2(x=-1, y=1)   # doctest: +ELLIPSIS\n(1.414..., 135.0)\n\n# x = 0, y < 0\n>>> to_polar2(x=0, y=-1)\n(1.0, -90.0)\n\n# x = 0, y = 0\n>>> to_polar2(x=0, y=0)\n(0.0, 0.0)",
            "title": "Atan2"
        },
        {
            "location": "/flow/polar/#polar",
            "text": "\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e polar \u0438\u0437 \u043f\u0430\u043a\u0435\u0442\u0430 math   >>> from cmath import polar\n\n# x > 0, y >= 0\n>>> polar(complex(1, 0))\n(1.0, 0.0)\n\n>>> r, phi = polar(complex(1, 1))\n>>> r  # doctest: +ELLIPSIS\n1.414...\n>>> math.radians(45.0)  # doctest: +ELLIPSIS\n0.785...\n>>> phi  # doctest: +ELLIPSIS\n0.785...\n\n# x > 0, y < 0\n>>> polar(complex(1, -1))  # doctest: +ELLIPSIS\n(1.414..., -0.785...)\n\n# x < 0\n>>> polar(complex(-1, 1))  # doctest: +ELLIPSIS\n(1.414..., 2.356...)\n\n# x = 0, y < 0\n>>> polar(complex(0, -1))  # doctest: +ELLIPSIS\n(1.0, -1.570...)\n\n# x = 0, y = 0\n>>> polar(complex(0, 0))\n(0.0, 0.0)",
            "title": "Polar"
        },
        {
            "location": "/flow/is_in_order/",
            "text": "\u0427\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\n>>> def is_in_order(*args):\n...     prev = None\n... \n...     for arg in args:\n...         if prev is not None and arg < prev:\n...             return False\n...         prev = arg\n... \n...     return True\n\n\n>>> is_in_order(1, 2, 3)\nTrue\n\n>>> is_in_order(1, 3, 2)\nFalse",
            "title": "\u0427\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f"
        },
        {
            "location": "/flow/is_in_order/#_1",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.  >>> def is_in_order(*args):\n...     prev = None\n... \n...     for arg in args:\n...         if prev is not None and arg < prev:\n...             return False\n...         prev = arg\n... \n...     return True\n\n\n>>> is_in_order(1, 2, 3)\nTrue\n\n>>> is_in_order(1, 3, 2)\nFalse",
            "title": "\u0427\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f"
        },
        {
            "location": "/flow/isbn/",
            "text": "\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430\n\n\nISBN\n\n\n\u0414\u043b\u044f \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0447\u0438\u0441\u043b\u043e.\n\u042d\u0442\u043e \u0441\u0443\u043c\u043c\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0447\u0438\u0441\u043b\u0430 \u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u0438.\n\u041f\u043e\u0437\u0438\u0446\u0438\u044f \u043d\u0443\u043c\u0435\u0440\u0443\u0435\u0442\u0441\u044f \u0441 10 \u043f\u043e 1 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e.\n\u0415\u0441\u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0430\u0442\u043d\u0430 11, \u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0446\u0438\u0444\u0440\u0430 \u043e\u0442 1 \u0434\u043e 10.\n\u0412\u043c\u0435\u0441\u0442\u043e 10 \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f X\n\n\n>>> def d(strcode):\n...     result = 0\n...     z = 10\n...     for x in strcode:\n...         result += z * float(x)\n...         z -= 1\n...     return result\n\n\n>>> def isbn(strcode):\n...     for x in range(10):\n...         test = strcode + str(x)\n...         if float(d(test)) % 11 == 0:\n...             return test\n\n\n>>> isbn('020131452')\n'0201314525'\n\n>>> isbn('123542143')\n'1235421430'",
            "title": "\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430"
        },
        {
            "location": "/flow/isbn/#_1",
            "text": "",
            "title": "\u041a\u043e\u043d\u0442\u0440\u043e\u043b\u044c\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430"
        },
        {
            "location": "/flow/isbn/#isbn",
            "text": "\u0414\u043b\u044f \u043d\u043e\u043c\u0435\u0440 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0447\u0438\u0441\u043b\u043e.\n\u042d\u0442\u043e \u0441\u0443\u043c\u043c\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0447\u0438\u0441\u043b\u0430 \u0438 \u043f\u043e\u0437\u0438\u0446\u0438\u0438.\n\u041f\u043e\u0437\u0438\u0446\u0438\u044f \u043d\u0443\u043c\u0435\u0440\u0443\u0435\u0442\u0441\u044f \u0441 10 \u043f\u043e 1 \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e.\n\u0415\u0441\u043b\u0438 \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0430\u0442\u043d\u0430 11, \u0442\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0446\u0438\u0444\u0440\u0430 \u043e\u0442 1 \u0434\u043e 10.\n\u0412\u043c\u0435\u0441\u0442\u043e 10 \u0441\u0442\u0430\u0432\u0438\u0442\u0441\u044f X  >>> def d(strcode):\n...     result = 0\n...     z = 10\n...     for x in strcode:\n...         result += z * float(x)\n...         z -= 1\n...     return result\n\n\n>>> def isbn(strcode):\n...     for x in range(10):\n...         test = strcode + str(x)\n...         if float(d(test)) % 11 == 0:\n...             return test\n\n\n>>> isbn('020131452')\n'0201314525'\n\n>>> isbn('123542143')\n'1235421430'",
            "title": "ISBN"
        },
        {
            "location": "/flow/bin/",
            "text": "\u0414\u0432\u043e\u0438\u0447\u043d\u0430\u044f \u0444\u043e\u0440\u043c\u0430\n\n\n>>> def pow2(n):\n...     if n < 0:\n...         raise ValueError('need n >= 0')\n...     power = 1\n...     i = 0\n...     while i <= n:\n...         yield power\n...         power *= 2\n...         i += 1\n\n\n>>> def close2power(n):\n...     power = 1\n...     while 2 * power <= n:\n...         power *= 2\n...     return power\n\n\n>>> def to_b(n):\n...     result = []\n... \n...     v = 1\n...     while v <= n // 2:\n...         v *= 2\n... \n...     while v > 0:\n...         if n < v:\n...             result.append('0')\n...         else:\n...             result.append('1')\n...             n -= v\n...         v //= 2\n... \n...     return ''.join(result)\n\n\n>>> def to_i(n):\n...     result = sum(pow(2, i) for i, x in enumerate(reversed(n)) if x == '1')\n...     return result\n\n\n\n\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u0434\u0432\u043e\u0439\u043a\u0438\n\n\n>>> n = -1\n>>> for i, x in enumerate(pow2(n)): # doctest: +ELLIPSIS\n...     i, x\nTraceback (most recent call last):\n  ...\nValueError: need n >= 0\n\n>>> n = 10\n>>> for i, x in enumerate(pow2(n)):\n...     i, x\n(0, 1)\n(1, 2)\n(2, 4)\n(3, 8)\n(4, 16)\n(5, 32)\n(6, 64)\n(7, 128)\n(8, 256)\n(9, 512)\n(10, 1024)\n\n>>> list(x for x in pow2(10))\n[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n\n\n\n\u0426\u0435\u043b\u043e\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0434\u0432\u043e\u0439\u043a\u0438 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0435 \u043a \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0446\u0435\u043b\u043e\u043c\u0443\n\n\n>>> close2power(3)\n2\n\n>>> close2power(10)\n8\n\n\n\n\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443\n\n\n>>> n = 19\n>>> to_b(n)\n'10011'\n\n\n\n\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f\n\n\n>>> bin(n)\n'0b10011'\n\n\n\n\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0446\u0435\u043b\u043e\u0435\n\n\n>>> to_i('10011')\n19",
            "title": "\u0414\u0432\u043e\u0438\u0447\u043d\u0430\u044f \u0444\u043e\u0440\u043c\u0430"
        },
        {
            "location": "/flow/bin/#_1",
            "text": ">>> def pow2(n):\n...     if n < 0:\n...         raise ValueError('need n >= 0')\n...     power = 1\n...     i = 0\n...     while i <= n:\n...         yield power\n...         power *= 2\n...         i += 1\n\n\n>>> def close2power(n):\n...     power = 1\n...     while 2 * power <= n:\n...         power *= 2\n...     return power\n\n\n>>> def to_b(n):\n...     result = []\n... \n...     v = 1\n...     while v <= n // 2:\n...         v *= 2\n... \n...     while v > 0:\n...         if n < v:\n...             result.append('0')\n...         else:\n...             result.append('1')\n...             n -= v\n...         v //= 2\n... \n...     return ''.join(result)\n\n\n>>> def to_i(n):\n...     result = sum(pow(2, i) for i, x in enumerate(reversed(n)) if x == '1')\n...     return result",
            "title": "\u0414\u0432\u043e\u0438\u0447\u043d\u0430\u044f \u0444\u043e\u0440\u043c\u0430"
        },
        {
            "location": "/flow/bin/#_2",
            "text": ">>> n = -1\n>>> for i, x in enumerate(pow2(n)): # doctest: +ELLIPSIS\n...     i, x\nTraceback (most recent call last):\n  ...\nValueError: need n >= 0\n\n>>> n = 10\n>>> for i, x in enumerate(pow2(n)):\n...     i, x\n(0, 1)\n(1, 2)\n(2, 4)\n(3, 8)\n(4, 16)\n(5, 32)\n(6, 64)\n(7, 128)\n(8, 256)\n(9, 512)\n(10, 1024)\n\n>>> list(x for x in pow2(10))\n[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]",
            "title": "\u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u0434\u0432\u043e\u0439\u043a\u0438"
        },
        {
            "location": "/flow/bin/#_3",
            "text": ">>> close2power(3)\n2\n\n>>> close2power(10)\n8",
            "title": "\u0426\u0435\u043b\u043e\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0434\u0432\u043e\u0439\u043a\u0438 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0435\u0435 \u043a \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0446\u0435\u043b\u043e\u043c\u0443"
        },
        {
            "location": "/flow/bin/#_4",
            "text": ">>> n = 19\n>>> to_b(n)\n'10011'  \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f  >>> bin(n)\n'0b10011'  \u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0434\u0432\u043e\u0438\u0447\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u0446\u0435\u043b\u043e\u0435  >>> to_i('10011')\n19",
            "title": "\u041f\u0435\u0440\u0435\u0432\u043e\u0434 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0434\u0432\u043e\u0438\u0447\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443"
        },
        {
            "location": "/flow/dragon_curves/",
            "text": "\u041a\u0440\u0438\u0432\u044b\u0435 \u0434\u0440\u0430\u043a\u043e\u043d\u0430\n\n\n>>> def inv_mid(text):\n...     if len(text) % 2 == 0:\n...         raise ValueError('text must be odd')\n...     mid = len(text) // 2\n...     list_ = list(text)\n...     list_[mid] = '0' if text[mid] == '1' else '1'\n...     return ''.join(list_)\n\n\n>>> def gen_dragon(n):\n...     d = '1'\n...     for x in range(n):\n...         yield d\n...         d = d + '1' + inv_mid(d)\n\n\n>>> inv_mid('10') # doctest: +ELLIPSIS\nTraceback (most recent call last):\n    ...\nValueError: text must be odd\n\n>>> inv_mid('101')\n'111'\n\n>>> inv_mid('010')\n'000'\n\n>>> n = 4\n>>> for x in gen_dragon(n):\n...     x\n'1'\n'110'\n'1101100'\n'110110011100100'",
            "title": "\u041a\u0440\u0438\u0432\u044b\u0435 \u0434\u0440\u0430\u043a\u043e\u043d\u0430"
        },
        {
            "location": "/flow/dragon_curves/#_1",
            "text": ">>> def inv_mid(text):\n...     if len(text) % 2 == 0:\n...         raise ValueError('text must be odd')\n...     mid = len(text) // 2\n...     list_ = list(text)\n...     list_[mid] = '0' if text[mid] == '1' else '1'\n...     return ''.join(list_)\n\n\n>>> def gen_dragon(n):\n...     d = '1'\n...     for x in range(n):\n...         yield d\n...         d = d + '1' + inv_mid(d)\n\n\n>>> inv_mid('10') # doctest: +ELLIPSIS\nTraceback (most recent call last):\n    ...\nValueError: text must be odd\n\n>>> inv_mid('101')\n'111'\n\n>>> inv_mid('010')\n'000'\n\n>>> n = 4\n>>> for x in gen_dragon(n):\n...     x\n'1'\n'110'\n'1101100'\n'110110011100100'",
            "title": "\u041a\u0440\u0438\u0432\u044b\u0435 \u0434\u0440\u0430\u043a\u043e\u043d\u0430"
        },
        {
            "location": "/flow/quadratic/",
            "text": "\u041a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435\n\n\n>>> import math\n\n>>> def quadratic(a, b, c):\n...     D = (b * b) - (4 * a * c)\n...     d = math.sqrt(D)\n...     x1 = (-b - d) / 2 * a\n...     x2 = ( b - d) / 2 * a\n...     return x1, x2\n\n\n>>> x1, x2 = quadratic(1, 2, 1)\n>>> x1\n-1.0\n>>> x2\n1.0",
            "title": "\u041a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435"
        },
        {
            "location": "/flow/quadratic/#_1",
            "text": ">>> import math\n\n>>> def quadratic(a, b, c):\n...     D = (b * b) - (4 * a * c)\n...     d = math.sqrt(D)\n...     x1 = (-b - d) / 2 * a\n...     x2 = ( b - d) / 2 * a\n...     return x1, x2\n\n\n>>> x1, x2 = quadratic(1, 2, 1)\n>>> x1\n-1.0\n>>> x2\n1.0",
            "title": "\u041a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435"
        },
        {
            "location": "/flow/earth/",
            "text": "\u0411\u043e\u043b\u044c\u0448\u0430\u044f \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u044c\n\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0448\u0438\u0440\u043e\u0442\u0443 \u0438 \u0434\u043e\u043b\u0433\u043e\u0442\u0443 \u0432 \u0433\u0440\u0430\u0434\u0443\u0441\u0430\u0445.\n\u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u044c \u0432 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043c\u0438\u043b\u044f\u0445.\n\n\n\u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u041f\u0430\u0440\u0438\u0436\u0435\u043c, \u0424\u0440\u0430\u043d\u0446\u0438\u044f \u0438 \u0421\u0430\u043d-\u0424\u0440\u0430\u043d\u0446\u0438\u0441\u043a\u043e, \u0448\u0442\u0430\u0442 \u041a\u0430\u043b\u0438\u0444\u043e\u0440\u043d\u0438\u044f, \u0421\u0428\u0410\n8964 \u043a\u043c = 5570 \u043c\u0438\u043b\u044c\n\n\n>>> from math import acos, sin, cos, radians, log\n\n>>> def big_circle(x1, y1, x2, y2):\n...     rx1 = radians(x1)\n...     rx2 = radians(x2)\n...     ry = radians(y1 - y2)\n...     ang = sin(rx1) * sin(rx2) + cos(rx1) * cos(rx2) * cos(ry)\n...     result = 60 * acos(ang)\n...     return result\n\n\n>>> def mercator(phi, lam, lam0):\n...     num = 1 + sin(phi)\n...     den = 1 - sin(phi)\n...     x = lam - lam0\n...     y = 1 / 2 * log(1 + sin(num / den))\n...     return x, y\n\n\n>>> paris = (48.87, -2.33)\n>>> san_francisco = (37.8, 122.4)\n>>> big_circle(*paris, *san_francisco)\n84.26870278998847\n\n\n\n\u041f\u0440\u043e\u0435\u043a\u0446\u0438\u044f \u041c\u0435\u0440\u043a\u0430\u0442\u043e\u0440\u0430\n\n\n>>> phi = 12\n>>> lam = 10\n>>> lam0 = 1\n>>> mercator(phi, lam, lam0)\n(9, 0.13004480476579486)",
            "title": "\u0411\u043e\u043b\u044c\u0448\u0430\u044f \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u044c"
        },
        {
            "location": "/flow/earth/#_1",
            "text": "\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0448\u0438\u0440\u043e\u0442\u0443 \u0438 \u0434\u043e\u043b\u0433\u043e\u0442\u0443 \u0432 \u0433\u0440\u0430\u0434\u0443\u0441\u0430\u0445.\n\u041d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u044c \u0432 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u043c\u0438\u043b\u044f\u0445.  \u0420\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u041f\u0430\u0440\u0438\u0436\u0435\u043c, \u0424\u0440\u0430\u043d\u0446\u0438\u044f \u0438 \u0421\u0430\u043d-\u0424\u0440\u0430\u043d\u0446\u0438\u0441\u043a\u043e, \u0448\u0442\u0430\u0442 \u041a\u0430\u043b\u0438\u0444\u043e\u0440\u043d\u0438\u044f, \u0421\u0428\u0410\n8964 \u043a\u043c = 5570 \u043c\u0438\u043b\u044c  >>> from math import acos, sin, cos, radians, log\n\n>>> def big_circle(x1, y1, x2, y2):\n...     rx1 = radians(x1)\n...     rx2 = radians(x2)\n...     ry = radians(y1 - y2)\n...     ang = sin(rx1) * sin(rx2) + cos(rx1) * cos(rx2) * cos(ry)\n...     result = 60 * acos(ang)\n...     return result\n\n\n>>> def mercator(phi, lam, lam0):\n...     num = 1 + sin(phi)\n...     den = 1 - sin(phi)\n...     x = lam - lam0\n...     y = 1 / 2 * log(1 + sin(num / den))\n...     return x, y\n\n\n>>> paris = (48.87, -2.33)\n>>> san_francisco = (37.8, 122.4)\n>>> big_circle(*paris, *san_francisco)\n84.26870278998847  \u041f\u0440\u043e\u0435\u043a\u0446\u0438\u044f \u041c\u0435\u0440\u043a\u0430\u0442\u043e\u0440\u0430  >>> phi = 12\n>>> lam = 10\n>>> lam0 = 1\n>>> mercator(phi, lam, lam0)\n(9, 0.13004480476579486)",
            "title": "\u0411\u043e\u043b\u044c\u0448\u0430\u044f \u043e\u043a\u0440\u0443\u0436\u043d\u043e\u0441\u0442\u044c"
        },
        {
            "location": "/flow/sums_products/",
            "text": "\u0421\u0443\u043c\u043c\u044b\n\n\n\u0421\u0443\u043c\u043c\u0430 \u0440\u044f\u0434\u0430 \u0447\u0438\u0441\u0435\u043b\n\n\n>>> 1 + 2 + 3 + 4 + 5\n15\n\n\\sum_{i=0}^{n-1} total_{i}\n\n>>> k = 5\n>>> total = 0.0\n>>> for i in range(1, k + 1):\n...     total += i\n>>> total\n15.0\n\n>>> a = [1, 2, 3, 4, 5]\n>>> sum(a)\n15\n\n\\sum_{i=1}^{k}n =  \\frac{k \\cdot (k+1)}{2}\n\n>>> k = 5 \n>>> (k * (k + 1)) / 2\n15.0\n\n\n\n\u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0440\u044f\u0434\u0430 \u0447\u0438\u0441\u0435\u043b (\u0424\u0430\u043a\u0442\u043e\u0440\u0438\u0430\u043b)\n\n\n\\prod_{i=1}^{k}i = 1 \\cdot 2 \\cdot 3 \\cdot 4 \\cdot ...\n\n>>> 1 * 2 * 3 * 4 * 5\n120\n\n>>> n = 5\n>>> product = 1.0\n>>> for i in range(1, n + 1):\n...     product *= i\n>>> product\n120.0\n\n\n\n\u041f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 \u0421\u0442\u0438\u0440\u043b\u0438\u043d\u0433\u0430\n\n\n\\sqrt{2\\cdot \\pi n}\\cdot \\left ( \\frac{n}{e} \\right )^{n}\n\n>>> import math\n>>> n = 5\n>>> f = math.sqrt(2 * math.pi * n) * math.pow(n / math.e, n)\n>>> f  # doctest: +ELLIPSIS\n118.0191679575901",
            "title": "\u0421\u0443\u043c\u043c\u044b"
        },
        {
            "location": "/flow/sums_products/#_1",
            "text": "",
            "title": "\u0421\u0443\u043c\u043c\u044b"
        },
        {
            "location": "/flow/sums_products/#_2",
            "text": ">>> 1 + 2 + 3 + 4 + 5\n15\n\n\\sum_{i=0}^{n-1} total_{i}\n\n>>> k = 5\n>>> total = 0.0\n>>> for i in range(1, k + 1):\n...     total += i\n>>> total\n15.0\n\n>>> a = [1, 2, 3, 4, 5]\n>>> sum(a)\n15\n\n\\sum_{i=1}^{k}n =  \\frac{k \\cdot (k+1)}{2}\n\n>>> k = 5 \n>>> (k * (k + 1)) / 2\n15.0",
            "title": "\u0421\u0443\u043c\u043c\u0430 \u0440\u044f\u0434\u0430 \u0447\u0438\u0441\u0435\u043b"
        },
        {
            "location": "/flow/sums_products/#_3",
            "text": "\\prod_{i=1}^{k}i = 1 \\cdot 2 \\cdot 3 \\cdot 4 \\cdot ...\n\n>>> 1 * 2 * 3 * 4 * 5\n120\n\n>>> n = 5\n>>> product = 1.0\n>>> for i in range(1, n + 1):\n...     product *= i\n>>> product\n120.0  \u041f\u0440\u0438\u0431\u043b\u0438\u0436\u0435\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0444\u043e\u0440\u043c\u0443\u043b\u0435 \u0421\u0442\u0438\u0440\u043b\u0438\u043d\u0433\u0430  \\sqrt{2\\cdot \\pi n}\\cdot \\left ( \\frac{n}{e} \\right )^{n}\n\n>>> import math\n>>> n = 5\n>>> f = math.sqrt(2 * math.pi * n) * math.pow(n / math.e, n)\n>>> f  # doctest: +ELLIPSIS\n118.0191679575901",
            "title": "\u041f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0440\u044f\u0434\u0430 \u0447\u0438\u0441\u0435\u043b (\u0424\u0430\u043a\u0442\u043e\u0440\u0438\u0430\u043b)"
        },
        {
            "location": "/flow/series/",
            "text": "\u0420\u044f\u0434\u044b\n\n\n>>> def odd_sign_ones(n):\n...     result = 0\n...     for i in range(1, n+1):\n...         sign = -1 if i % 2 == 0 else 1\n...         result += sign * 1\n...     return result\n\n\n>>> def x_powers(x, n):\n...     result = 0\n...     temp = 1\n...     for i in range(1, n+1):\n...         temp *= x\n...         result += temp\n...     return result\n\n\n>>> def odd_sign_x_powers(x, n):\n...     result = 0\n...     temp = 1\n...     for i in range(1, n+1):\n...         temp *= x\n...         sign = -1 if i % 2 == 0 else 1\n...         result += sign * temp\n...     return result\n\n\n>>> def odd_powers_x(x, n):\n...     result = 0\n...     temp = 1\n...     for i in range(1, n+1):\n...         temp *= x\n...         if i % 2 != 0:\n...             result += temp\n...     return result\n\n\n>>> def odd_sign_powers_x(x, n):\n...     result = 0\n...     temp = 1\n...     z = 1\n...     for i in range(1, n+1):\n...         temp *= x\n...         if i % 2 != 0:\n...             sign = -1 if z % 2 == 0 else 1\n...             result += sign * temp\n...             z += 1\n...     return result\n\n\n>>> def factseq(n):\n...     result = 0\n...     temp = 1\n...     for i in range(1, n + 1):\n...         temp *= i\n...         result += temp\n...     return result\n\n\n>>> def taylor(x, n):\n...     result = 1\n...     temp = 1\n...     for i in range(1, n + 1):\n...         temp *= x / i\n...         result += temp\n...     return result\n\n\n>>> def sine(x, n):\n...     result = 0\n...     temp = 1\n...     z = 1\n...     for i in range(1, n+1):\n...         temp *= x / i\n...         if i % 2 != 0:\n...             sign = -1 if z % 2 == 0 else 1\n...             result += sign * temp\n...             z += 1\n...     return result\n\n\n>>> def cosine(x, n):\n...     result = 1\n...     temp = 1\n...     z = 1\n...     for i in range(1, n+1):\n...         temp *= x / i\n...         if i % 2 == 0:\n...             sign = -1 if z % 2 != 0 else 1\n...             result += sign * temp\n...             z += 1\n...     return result\n\n\n\n\u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0434\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0435\u0434\u0438\u043d\u0438\u0446\n\n\n>>> 1 - 1 + 1 - 1 + 1\n1\n>>> odd_sign_ones(5)\n1\n\n\n\n\u0421\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434\n\n\n>>> x = 2\n>>> z = x + x**2 + x**3 + x**4 + x**5\n>>> z\n62\n>>> x_powers(x=2, n=5)\n62\n\n\n\n\u0427\u0435\u0440\u0435\u0434\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434\n\n\n>>> x = 2\n>>> z = x - x**2 + x**3 - x**4 + x**5\n>>> z\n22\n>>> odd_sign_x_powers(x=2, n=5)\n22\n\n\n\n\u041d\u0435\u0447\u0435\u0442\u043d\u044b\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434\n\n\n>>> x = 2\n>>> z = x + x**3 + x**5 + x**7\n>>> z\n170\n>>> odd_powers_x(x=2, n=7)\n170\n\n\n\n\u0427\u0435\u0440\u0435\u0434\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434\n\n\n>>> x = 2\n>>> z = x - x**3 + x**5 - x**7\n>>> z\n-102\n>>> odd_sign_powers_x(x=2, n=7)\n-102\n\n\n\n\u0420\u044f\u0434 \u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0430\u043b\u043e\u0432\n\n\n>>> 1 + 1*2 + 1*2*3 + 1*2*3*4\n33\n>>> factseq(4)\n33\n\n\n\nTaylor series\n\n\n>>> x = 2\n>>> 1 + x/1 + x**2 / (1*2) + x**3 / (1*2*3)\n6.333333333333333\n>>> taylor(x=2, n=3)\n6.333333333333333\n\n\n\n\u0421\u0438\u043d\u0443\u0441\n\n\n>>> x = 2\n>>> x - x**3 / (1*2*3) + x**5 / (1*2*3*4*5)\n0.9333333333333333\n>>> sine(x=2, n=5)\n0.9333333333333333\n\n\n\n\u041a\u043e\u0441\u0438\u043d\u0443\u0441\n\n\n>>> x = 2\n>>> 1 - x**2/(1*2) + x**4/(1*2*3*4)\n-0.33333333333333337\n\n>>> cosine(x=2, n=4)\n-0.33333333333333337",
            "title": "\u0420\u044f\u0434\u044b"
        },
        {
            "location": "/flow/series/#_1",
            "text": ">>> def odd_sign_ones(n):\n...     result = 0\n...     for i in range(1, n+1):\n...         sign = -1 if i % 2 == 0 else 1\n...         result += sign * 1\n...     return result\n\n\n>>> def x_powers(x, n):\n...     result = 0\n...     temp = 1\n...     for i in range(1, n+1):\n...         temp *= x\n...         result += temp\n...     return result\n\n\n>>> def odd_sign_x_powers(x, n):\n...     result = 0\n...     temp = 1\n...     for i in range(1, n+1):\n...         temp *= x\n...         sign = -1 if i % 2 == 0 else 1\n...         result += sign * temp\n...     return result\n\n\n>>> def odd_powers_x(x, n):\n...     result = 0\n...     temp = 1\n...     for i in range(1, n+1):\n...         temp *= x\n...         if i % 2 != 0:\n...             result += temp\n...     return result\n\n\n>>> def odd_sign_powers_x(x, n):\n...     result = 0\n...     temp = 1\n...     z = 1\n...     for i in range(1, n+1):\n...         temp *= x\n...         if i % 2 != 0:\n...             sign = -1 if z % 2 == 0 else 1\n...             result += sign * temp\n...             z += 1\n...     return result\n\n\n>>> def factseq(n):\n...     result = 0\n...     temp = 1\n...     for i in range(1, n + 1):\n...         temp *= i\n...         result += temp\n...     return result\n\n\n>>> def taylor(x, n):\n...     result = 1\n...     temp = 1\n...     for i in range(1, n + 1):\n...         temp *= x / i\n...         result += temp\n...     return result\n\n\n>>> def sine(x, n):\n...     result = 0\n...     temp = 1\n...     z = 1\n...     for i in range(1, n+1):\n...         temp *= x / i\n...         if i % 2 != 0:\n...             sign = -1 if z % 2 == 0 else 1\n...             result += sign * temp\n...             z += 1\n...     return result\n\n\n>>> def cosine(x, n):\n...     result = 1\n...     temp = 1\n...     z = 1\n...     for i in range(1, n+1):\n...         temp *= x / i\n...         if i % 2 == 0:\n...             sign = -1 if z % 2 != 0 else 1\n...             result += sign * temp\n...             z += 1\n...     return result  \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u0434\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0435\u0434\u0438\u043d\u0438\u0446  >>> 1 - 1 + 1 - 1 + 1\n1\n>>> odd_sign_ones(5)\n1  \u0421\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434  >>> x = 2\n>>> z = x + x**2 + x**3 + x**4 + x**5\n>>> z\n62\n>>> x_powers(x=2, n=5)\n62  \u0427\u0435\u0440\u0435\u0434\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434  >>> x = 2\n>>> z = x - x**2 + x**3 - x**4 + x**5\n>>> z\n22\n>>> odd_sign_x_powers(x=2, n=5)\n22  \u041d\u0435\u0447\u0435\u0442\u043d\u044b\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434  >>> x = 2\n>>> z = x + x**3 + x**5 + x**7\n>>> z\n170\n>>> odd_powers_x(x=2, n=7)\n170  \u0427\u0435\u0440\u0435\u0434\u0443\u044e\u0449\u0438\u0439\u0441\u044f \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e\u0439 \u0440\u044f\u0434  >>> x = 2\n>>> z = x - x**3 + x**5 - x**7\n>>> z\n-102\n>>> odd_sign_powers_x(x=2, n=7)\n-102  \u0420\u044f\u0434 \u0444\u0430\u043a\u0442\u043e\u0440\u0438\u0430\u043b\u043e\u0432  >>> 1 + 1*2 + 1*2*3 + 1*2*3*4\n33\n>>> factseq(4)\n33  Taylor series  >>> x = 2\n>>> 1 + x/1 + x**2 / (1*2) + x**3 / (1*2*3)\n6.333333333333333\n>>> taylor(x=2, n=3)\n6.333333333333333  \u0421\u0438\u043d\u0443\u0441  >>> x = 2\n>>> x - x**3 / (1*2*3) + x**5 / (1*2*3*4*5)\n0.9333333333333333\n>>> sine(x=2, n=5)\n0.9333333333333333  \u041a\u043e\u0441\u0438\u043d\u0443\u0441  >>> x = 2\n>>> 1 - x**2/(1*2) + x**4/(1*2*3*4)\n-0.33333333333333337\n\n>>> cosine(x=2, n=4)\n-0.33333333333333337",
            "title": "\u0420\u044f\u0434\u044b"
        },
        {
            "location": "/io/save_post_calcs/",
            "text": "\u041f\u0438\u0448\u0435\u043c \u0438 \u0447\u0438\u0442\u0430\u0435\u043c json \u0444\u0430\u0439\u043b\n\n\n>>> import json\n\n>>> x = {\n...     'a': 1,\n...     'b': 2\n... }\n\n\n# \u041f\u0438\u0448\u0435\u043c\n>>> with open('x.json', 'w') as f:\n...     _ = f.write(json.dumps(x))\n\n\n# \u0427\u0438\u0442\u0430\u0435\u043c\n>>> with open('x.json', 'r') as f:\n...     z = json.load(f)\n\n\n>>> print(isinstance(z, dict))\nTrue\n>>> print(z['a'])\n1",
            "title": "\u041f\u0438\u0448\u0435\u043c \u0438 \u0447\u0438\u0442\u0430\u0435\u043c json \u0444\u0430\u0439\u043b"
        },
        {
            "location": "/io/save_post_calcs/#json",
            "text": ">>> import json\n\n>>> x = {\n...     'a': 1,\n...     'b': 2\n... }\n\n\n# \u041f\u0438\u0448\u0435\u043c\n>>> with open('x.json', 'w') as f:\n...     _ = f.write(json.dumps(x))\n\n\n# \u0427\u0438\u0442\u0430\u0435\u043c\n>>> with open('x.json', 'r') as f:\n...     z = json.load(f)\n\n\n>>> print(isinstance(z, dict))\nTrue\n>>> print(z['a'])\n1",
            "title": "\u041f\u0438\u0448\u0435\u043c \u0438 \u0447\u0438\u0442\u0430\u0435\u043c json \u0444\u0430\u0439\u043b"
        },
        {
            "location": "/io/sep/",
            "text": "\"\n\n\n\u041f\u0438\u0448\u0435\u043c \u0438 \u0447\u0438\u0442\u0430\u0435\u043c \u0444\u0430\u0439\u043b\n\n\n\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0444\u0430\u0439\u043b.\n\n\nfile sep.txt\n------------\na 1\nb 2\n\n>>> x = [\n...     ('a', 1),\n...     ('b', 2)\n... ]\n\n# \u041f\u0438\u0448\u0435\u043c\n>>> with open('sep.txt', 'w') as f:\n...     for key, value in x:\n...         _ = f.write(\"{} {}\\\\n\".format(key, value))\n\n# \u0427\u0438\u0442\u0430\u0435\u043c\n>>> with open('sep.txt', 'r') as f:\n...     for line in f:\n...         print(line.split())\n['a', '1']\n['b', '2']",
            "title": "\u041f\u0438\u0448\u0435\u043c \u0438 \u0447\u0438\u0442\u0430\u0435\u043c \u0444\u0430\u0439\u043b"
        },
        {
            "location": "/io/sep/#_1",
            "text": "\u0417\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0444\u0430\u0439\u043b.  file sep.txt\n------------\na 1\nb 2\n\n>>> x = [\n...     ('a', 1),\n...     ('b', 2)\n... ]\n\n# \u041f\u0438\u0448\u0435\u043c\n>>> with open('sep.txt', 'w') as f:\n...     for key, value in x:\n...         _ = f.write(\"{} {}\\\\n\".format(key, value))\n\n# \u0427\u0438\u0442\u0430\u0435\u043c\n>>> with open('sep.txt', 'r') as f:\n...     for line in f:\n...         print(line.split())\n['a', '1']\n['b', '2']",
            "title": "\u041f\u0438\u0448\u0435\u043c \u0438 \u0447\u0438\u0442\u0430\u0435\u043c \u0444\u0430\u0439\u043b"
        }
    ]
}